<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小程序笔记 on Janny</title>
    <link>https://jannyluo.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 小程序笔记 on Janny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jun 2020 22:13:32 +0800</lastBuildDate>
    
	<atom:link href="https://jannyluo.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>小程序中父子组件之间传值</title>
      <link>https://jannyluo.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/</link>
      <pubDate>Thu, 18 Jun 2020 22:13:32 +0800</pubDate>
      
      <guid>https://jannyluo.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/</guid>
      <description>子组件向父组件传值 子组件通过自定义参数传递，父组件在properties中接收
properties：{ Tabs(属性名):{ Type:Array; (数据类型） Value:[ ] } } properties中的值和data中的值一样，可以直接使用
 父组件向子组件传值 This.triggerEvent(“方法”,参数）  </description>
    </item>
    
    <item>
      <title>小程序的缓存</title>
      <link>https://jannyluo.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%93%E5%AD%98/</link>
      <pubDate>Thu, 18 Jun 2020 22:12:25 +0800</pubDate>
      
      <guid>https://jannyluo.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%93%E5%AD%98/</guid>
      <description> 判断本地存储中有没有旧的数据。{time:Date.now(),data:[. ]} 没有旧的数据则重新发送请求 有旧的数据同时旧的数据没有过期则使用本地存储  const Cates=wx.getStorageSync(“cates”) If(!Cates){ this.getCates() }else{ If(Date.now()-Cates.time)&amp;gt;1000*10){ this.getCates() }else{ this.Cates=Cates.data let leftMenuList=this.Cates.map(v=&amp;gt;v.cat_name) let rightContent=this.Cates[0].children this.setData({ leftMenuList rightContent }) } } </description>
    </item>
    
    <item>
      <title>小程序中组件</title>
      <link>https://jannyluo.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Thu, 18 Jun 2020 21:58:54 +0800</pubDate>
      
      <guid>https://jannyluo.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%BB%84%E4%BB%B6/</guid>
      <description>swiper轮播图组件 &amp;lt;swiper&amp;gt; &amp;lt;swiper-item&amp;gt;&amp;lt;image src=‘’/&amp;gt;&amp;lt;/swiper-item&amp;gt; &amp;lt;/swiper&amp;gt; 默认高度：150px，image也存在默认的高度
swiper 高度=swiper宽度 * 原图的高度 / 原图的宽度
 swiper的height： 100vw * 原图的高度 / 原图的宽度  swiper{ Width:100% Height:calc(100vw * 原图的高度 / 原图的宽度) } Image{ Width:100% } 轮播图属性：
 autoplay interval（修改轮播时间） circular（与interval配合） indicator-dots（面板知识点） indicator-color（未选中的颜色） indicator-active-color（选中的颜色）  ##Navigator导航 属性：
 url指定页面路径，不加后缀名 open-type 跳转的方式：   默认值 ：navigate（不能跳到tabbar的页面） redirect （跳转不保留原来的页面，没有返回按钮） switchTab（跳转到tabbar页面，并且关闭所有其他非tabbar的页面） reLaunch （关闭所有页面，随便跳转到哪个页面）  </description>
    </item>
    
    <item>
      <title>小程序中的标签使用</title>
      <link>https://jannyluo.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 18 Jun 2020 21:52:18 +0800</pubDate>
      
      <guid>https://jannyluo.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8/</guid>
      <description>#小程序中的标签 text标签（相当于span标签）：
 文本标签 只能嵌套text 长按文字可以复制的属性：selectable 是否解码：decode   block标签不显示
 View标签相当于div
 image图片标签：
 Src指定加载图片的路径（用网络图片） mode决定图片宽高适配：   默认值：scaleToFill（不做纵横比例） aspectFit（保持宽高比，保证图片的长边能够完全显示） aspectFill（保持宽高比，保证图片的短边能够完全显示，少用） widthFix（宽度指定之后，高度会按比例自己调整，常用）  小程序中的图片是直接支持懒加载的 lazy-load   rich-text富文本标签 node属性：
 接收标签字符串&amp;lt;rich-text node=“{{html}}&amp;quot;&amp;gt; 接收对象数组   button标签 属性：
 size（default、mini） type控制按钮颜色 （default：灰色、primary：绿色、warn：红色） plain按钮是否镂空，背景色透明 loading 是否加入等待图标 开放能力： open-type属性 contact：打开客服对话 share：转发（不能把小程序分享到朋友圈） getPhoneNumber：获取手机号码信息：绑定一个事件bindgetphonenumber、在实践的回调函数中通过参数获取信息func（e）{} getUserInfo：获取个人信息: bindgetuserinfo事件 launchApp：在小程序中直接打开app openSetting：打开小程序内置的授权页面 feedback：打开小程序内置的意见反馈页面   icon标签：
 type属性：类型 size属性 color属性   radio单选框 &amp;lt;radio-group bindchange=‘&#39;&amp;gt; &amp;lt;radio value=&#39;&#39;&amp;gt;&amp;lt;/radio&amp;gt;</description>
    </item>
    
    <item>
      <title>小程序的生命周期函数</title>
      <link>https://jannyluo.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 18 Jun 2020 19:58:32 +0800</pubDate>
      
      <guid>https://jannyluo.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</guid>
      <description>在app.js中
 onLaunch( )：应用第一次启动就会触发的事件，获取用户的个人信息 onShow( )：应用被用户看到，对应用的数据或页面效果重置 onHide( )：应用被隐藏，暂停或者清除定时器 onError（err）：应用代码发生报错，收集用户的错误信息，通过异步请求将错误信息发送到后台 onPageNotFound（ ）：应用第一次启动的时候如果找不到第一个入口页面才会触发，如果页面不存在了，可以通过js的方式跳转页面，重新跳转到第二个首页（不能跳到tabbar）   onPageNotFound（）{ Wx.navigateTo({ Url:’/pages/demo09/demo09&#39; }) } 页面的生命周期函数
 onLoad：function（options）{ } :监听页面加载 onShow：function（）{ }: 监听页面显示 onReady：function（） { }: 监听页面初次渲染完成 onHide：function（）{}:监听页面隐藏 onUnload：function（ ） {}： 关闭当前页面等于卸载当前页面，查看navigator的参数是保留当前页面还是关闭当前页面 onPullDownRefresh： function（）{}:监听用户下拉动作 onReachBottom： function（）{}: 监听页面上拉触底事件，要让页面有滚动条才行（加载下一页数据） onShareAppMessage： function（）{}:用户点击右上角分享 onPageScroll ：function（) {}:页面滚动就会触发 onResize：function（）{}:页面尺寸发生改变的时候触发（横屏竖屏切换）**开启页面的横屏竖屏切换：**在json文件中加入&amp;quot;pageOrientation&amp;quot;：&amp;quot;auto&amp;quot; onTabItemTap：function（）{}: 1、必须要求当前的页面也是tabbar页面，点击自己的tab item时才会触发  </description>
    </item>
    
  </channel>
</rss>